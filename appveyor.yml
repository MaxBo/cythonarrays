branches:
    only:
    - master

skip_branch_with_pr: true

environment:

  # SDK v7.0 MSVC Express 2008's SetEnv.cmd script will fail if the
  # /E:ON and /V:ON options are not enabled in the batch script interpreter
  # See: http://stackoverflow.com/a/13751649/163740
  # CMD_IN_ENV: "cmd /E:ON /V:ON /C obvci_appveyor_python_build_env.cmd"

  ANACONDA_TOKEN:
    secure: mhuiPtFbEu6DHu8hvGyoIKAt3TAIKtYSeqg5QPLs4hCxDZ3gUAAP+wIW15wQE3hB

  TWINE_REPOSITORY: pypi
  TWINE_REPOSITORY_URL: https://upload.pypi.org/legacy/
  TWINE_USERNAME: MaxBo

  TWINE_PASSWORD:
    secure: gP/K3qjmop4350VEPvTfQg==

  CODECOV_TOKEN:
    secure: mQ6pnaM1xr97Fvf8CKU5XMVftz08EheIwm7kdGnLN7pI/8NYD9VZRJyjDbqcWR44

  matrix:

    - TARGET_ARCH: x64
      CONDA_NPY: 123
      CONDA_PY: 311
      PYTHON_VERSION: 3.11
      MINICONDA: C:\Miniconda37-x64
      CONDA_INSTALL_LOCN: C:\\Miniconda37-x64
      UPLOAD_COV: true

    - TARGET_ARCH: x64
      CONDA_NPY: 121
      CONDA_PY: 310
      PYTHON_VERSION: 3.10
      MINICONDA: C:\Miniconda37-x64
      CONDA_INSTALL_LOCN: C:\\Miniconda37-x64
      UPLOAD_COV: false

    - TARGET_ARCH: x64
      CONDA_NPY: 119
      CONDA_PY: 39
      PYTHON_VERSION: 3.9
      MINICONDA: C:\Miniconda37-x64
      CONDA_INSTALL_LOCN: C:\\Miniconda37-x64
      UPLOAD_COV: false

    - TARGET_ARCH: x64
      CONDA_NPY: 117
      CONDA_PY: 38
      PYTHON_VERSION: 3.8
      MINICONDA: C:\Miniconda37-x64
      CONDA_INSTALL_LOCN: C:\\Miniconda37-x64
      UPLOAD_COV: false

    - TARGET_ARCH: x64
      CONDA_NPY: 116
      CONDA_PY: 37
      PYTHON_VERSION: 3.7
      MINICONDA: C:\Miniconda37-x64
      CONDA_INSTALL_LOCN: C:\\Miniconda37-x64
      UPLOAD_COV: false

    # Depreciate python 3.6 because of incompatible bleech version
    #- TARGET_ARCH: x64
    #  CONDA_NPY: 116
    #  CONDA_PY: 36
    #  PYTHON_VERSION: 3.6
    #  MINICONDA: C:\Miniconda37-x64
    #  CONDA_INSTALL_LOCN: C:\\Miniconda37-x64
    #  UPLOAD_COV: false

    # Depreciate python 3.5 because of incompatible netcdf4 version
    #- TARGET_ARCH: x64
      #CONDA_NPY: 115
      #CONDA_PY: 35
      #PYTHON_VERSION: 3.5
      #CONDA_INSTALL_LOCN: C:\\Miniconda36-x64
      #UPLOAD_COV: false


# We always use a 64-bit machine, but can build x86 distributions
# with the TARGET_ARCH variable.
platform:
    - x64

install:
    # If there is a newer build queued for the same PR, cancel this one.
    # The AppVeyor 'rollout builds' option is supposed to serve the same
    # purpose but it is problematic because it tends to cancel builds pushed
    # directly to master instead of just PR builds (or the converse).
    # credits: JuliaLang developers.
    - ps: if ($env:APPVEYOR_PULL_REQUEST_NUMBER -and $env:APPVEYOR_BUILD_NUMBER -ne ((Invoke-RestMethod `
         https://ci.appveyor.com/api/projects/$env:APPVEYOR_ACCOUNT_NAME/$env:APPVEYOR_PROJECT_SLUG/history?recordsNumber=50).builds | `
         Where-Object pullRequestId -eq $env:APPVEYOR_PULL_REQUEST_NUMBER)[0].buildNumber) { `
           throw "There are newer queued builds for this pull request, failing early." }

    #- ps: $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))

    # increase timeout values
    - "echo remote_read_timeout_secs: 200.0 >> %USERPROFILE%\\.condarc"

    # Add path, activate `conda` and update conda.
    - cmd: set "PATH=%CONDA_INSTALL_LOCN%\\Scripts;%CONDA_INSTALL_LOCN%\\Library\\bin;%PATH%"
    - cmd: conda update --yes --quiet conda
    - cmd: call %CONDA_INSTALL_LOCN%\Scripts\activate.bat

    - cmd: set PYTHONUNBUFFERED=1

    # codecoverage
    #- cmd: choco install codecov

    # Ensure defaults and conda-forge channels are present.
    - cmd: conda config --set show_channel_urls true
    - cmd: conda config --remove channels defaults
    - cmd: conda config --add channels defaults
    - cmd: conda config --add channels conda-forge
    - cmd: conda config --add channels MaxBo

    # Conda build tools.
    - cmd: conda install -n root --yes yaml
    - cmd: conda install -n root --quiet --yes obvious-ci
    - cmd: obvci_install_conda_build_tools.py
    # latest conda-build
    - cmd: conda install -y -n root conda-build=3 conda-verify

    # Create conda test-environment
    - cmd: conda info
    - cmd: conda create -y -n test-environment python=%PYTHON_VERSION%
    - cmd: activate test-environment

    - cmd: set TMPDIR=%TMP%
    - ps: $env:TMPDIR=$env:TMP


# Skip .NET project specific build phase.
build: off

test_script:
  # Build the compiled extension
    - cmd: conda info
    - cmd: IF DEFINED ANACONDA_TOKEN (conda build cythoninstallhelpers/conda.recipe --user MaxBo --token %ANACONDA_TOKEN% && conda install -n root -y --use-local cythoninstallhelpers && conda install -y --use-local cythoninstallhelpers && conda build cythonarrays/conda.recipe --user MaxBo --token %ANACONDA_TOKEN% && conda build matrixconverters/conda.recipe --user MaxBo --token %ANACONDA_TOKEN% ) ELSE (conda build cythoninstallhelpers/conda.recipe --no-anaconda-upload && conda install -n root -y --use-local cythoninstallhelpers && conda install -y --use-local cythoninstallhelpers && conda build cythonarrays/conda.recipe --no-anaconda-upload && conda build matrixconverters/conda.recipe --no-anaconda-upload)

after_test:

  # Upload to Pypi with twine
  - cmd: conda install -y twine
  - cmd: pip install readme_renderer
  - cmd: cd cythoninstallhelpers
  - cmd: python setup.py bdist_wheel sdist
  - cmd: IF %APPVEYOR_REPO_TAG%==true ( twine upload --skip-existing dist\* )
  - cmd: cd ..
  - cmd: conda install -y --use-local cythoninstallhelpers
  - cmd: cd cythonarrays
  - cmd: python setup.py bdist_wheel sdist
  - cmd: IF %APPVEYOR_REPO_TAG%==true ( twine upload --skip-existing dist\* )

  # recompile with linetrace if coverage of pyx files should be uploaded - not for production
  - cmd: IF %UPLOAD_COV%==true ( python setup.py build_ext --force --inplace --define CYTHON_TRACE_NOGIL )

  - cmd: cd ..
  - cmd: conda install -y --use-local cythonarrays
  - cmd: cd matrixconverters
  - cmd: python setup.py bdist_wheel sdist
  - cmd: IF %APPVEYOR_REPO_TAG%==true ( twine upload --skip-existing dist\* )
  - cmd: cd ..

  # install code coverage
  - cmd: IF %UPLOAD_COV%==true ( conda install -y pytest-cov)
  - cmd: IF %UPLOAD_COV%==true ( pip install codecov)

  # code coverage: install packages editable
  - cmd: cd cythoninstallhelpers
  #- ps: $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))

  # otherwise, the easy-install.pth is not found somehow and the pip failes
  # - cmd: python setup.py develop
  - cmd: pip install -e .
  - cmd: IF %UPLOAD_COV%==true ( py.test --cov=src --pyargs cythoninstallhelpers )

  - cmd: cd ..\cythonarrays
  - cmd: pip install -e .
  # create extensions with linetrace (not for production)
  - cmd: IF %UPLOAD_COV%==true ( python setup.py build_ext --force --inplace --define CYTHON_TRACE_NOGIL )
  - cmd: IF %UPLOAD_COV%==true ( py.test --cov=src --pyargs cythonarrays )

  - cmd: cd ..\matrixconverters
  - cmd: pip install -e .
  - cmd: IF %UPLOAD_COV%==true ( py.test --cov=src --pyargs matrixconverters )

  # combine the results from the packages
  - cmd: cd ..
  - cmd: IF %UPLOAD_COV%==true ( coverage combine cythoninstallhelpers\.coverage cythonarrays\.coverage matrixconverters\.coverage )
  - cmd: IF %UPLOAD_COV%==true ( coverage xml )

  # upload the results to codecov.io
  - cmd: IF %UPLOAD_COV%==true ( codecov -X gcov -f "coverage.xml" )

artifacts:
  # bdist_wheel puts your built wheel in the dist directory
  - path: cythoninstallhelpers\dist\*
  - path: cythonarrays\dist\*
  - path: matrixconverters\dist\*
